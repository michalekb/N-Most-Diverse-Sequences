demo()
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
1+1
1+6
2:7
5-
3
abs <- "six pack"
abs
abs +1
abs +"1"
abs + "one"
dumb = "ty"
dumb
ls
ls ()
ls
ls ()
del
rm
rm (abs)
rm (dumb)
"hello world"
print (hello world)
hiya julia
"julia is cute""
"julia is cute""
"julia is cute"
guess.what <- "julia is cute"
guess.what
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
librar(ape)
library(phylobase)
library(ape)
hey
print(hey)
"hello world"
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
library(ape)
library(phylobase)
install.packages("ape")
install.packages("phylobase")
tree.test <- "(((t2:0.00000046788020592157,t4:0.00000046788020592157):0.00000046788020592157,t3:0.00000046788020592157):0.10934003018317024758,(t10:0.04184618573517987633,(t9:0.00000046788020592157,((t7:0.00000046788020592157,(t5:0.02237676579257168868,t6:0.07742197621376159522):0.05136134201448697839):0.04634952902815735187,t8:0.00000046788020592157):0.05287902113335381238):0.05167043123434712087):0.39113103728388676217,t1:0.00000046788020592157):0.0;"
install.packages("getopt")
library(getopt)
)
getopt(
"verbose", "print messages"
)
help("getopt")
# get options, using the spec as defined by the enclosed list.
# we read the options from the default: commandArgs(TRUE).
spec = matrix(c(
'verbose', 'v', 2, "integer",
'help'   , 'h', 0, "logical",
'count'  , 'c', 1, "integer",
'mean'   , 'm', 1, "double",
'sd'     , 's', 1, "double"
), byrow=TRUE, ncol=4)
opt = getopt(spec)
-v
View(opt)
#!/path/to/Rscript
library('getopt')
-h
-h
tree.rd <- read.tree(text=tree.test)
hey <- 3
hey
print (hey)
print (hey)
hey = 3
hey
hey = 3
hey
#help option
if ( !is.null(opt$help) ) {
cat(getopt(spec, usage=TRUE))
q(status=1)
}
#create getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'text', 't', 2, 'character',
), byrow=TRUE, ncol=4)
#create getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'text', 't', 2, 'character'
), byrow=TRUE, ncol=4)
View(spec)
if ( !is.null(opt$version) ) {
cat("0.01")
}
version
#!/path/to/Rscript
library ('getopt')
q(status=0)
cat(t "\n")
cat(t \n)
cat(t+"\n")
cat("\n")
cat("-v version\n -h help\n -t give me some text")
q(status=1)
cat("-v version\n -h help\n -t give me some text\n")
cat(" -v version\n -h help\n -t give me some text\n")
print ("hello world")
print(t)
q(status=1)
#if nothing selected
print ("hello world")
t
#okay lets play with phylobase, first convert
(g1 <- as(tree.rd, "phylo4"))
#you'll need the following libaries
library(ape)
library(phylobase)
#let's load the the tree
tree.test <- "(((t2:0.00000046788020592157,t4:0.00000046788020592157):0.00000046788020592157,t3:0.00000046788020592157):0.10934003018317024758,(t10:0.04184618573517987633,(t9:0.00000046788020592157,((t7:0.00000046788020592157,(t5:0.02237676579257168868,t6:0.07742197621376159522):0.05136134201448697839):0.04634952902815735187,t8:0.00000046788020592157):0.05287902113335381238):0.05167043123434712087):0.39113103728388676217,t1:0.00000046788020592157):0.0;"
tree.rd <- read.tree(text=tree.test)
#this will do some sorting for the plot
tree.ltg <- node.depth.edgelength(tree.rd)
tree.top <- sort(tree.ltg, index.return=TRUE, decreasing=TRUE)
tree.top <- tree.top$ix[1:5]
#and plot
plot(tree.rd, node.depth = 2)
nodelabels(node = node.height(tree.rd), col = "red", cex = 1.3)
#okay lets play with phylobase, first convert
(g1 <- as(tree.rd, "phylo4"))
#great, not lets lets test some stuff
nodeId(g1, type='all')
edgeLength(g1)
#whats the tip depth
tree.depth <- depthTips(g1)
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
?read.table
?writeLines
include.packages
include.packages(SparkR)
include.package(SparkR)
install.packages("SparkR")
#if nothing selected
print ("hello world")
?write.text
??write.text
?read.text
??read.text
?write.table
include.packages("phylobase")
install.packages("PopGenome")
install.packages("diveRsity")
instal.packages("PopGenome")
install.packages("PopGenome")
install.packages("PopGenome")
install.packages("https://cran.r-project.org/src/contrib/Archive/PopGenome/PopGenome_2.7.2.tar.gz", repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/PopGenome/PopGenome_2.7.2.tar.gz", repos = NULL, type = "source")
install.packages("ff")
install.packages("https://cran.r-project.org/src/contrib/Archive/PopGenome/PopGenome_2.7.2.tar.gz", repos = NULL, type = "source")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
include.packages("seqinr")
include.package("seqinr")
install.packages("seqinr")
?readDNAStringset
?AlignSeqs
?AlignSeqs
??AlignSeqs
?spec
?getopt
??getopt
?'getopt'
??getOption
?getopts
??getopts
?plot
?arrows
?dendrapply
#!/path/to/Rscript
#library to use getops
library('getopt')
#help option as a function
help_opt = function() {
cat("-v version\n-h help\n-i input file\n-n number of sequences we want
-t produce tree\n-d run diversity method\n-o output file\n")
}
#Version
ver = ".01"
#getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'input', 'i', 2, 'character',
'num', 'n', 2, 'integer',
'tree', 't', 0, 'character',
'div', 'd', 2, 'integer',
'output', 'o', 1, 'character'
), byrow=TRUE, ncol=4)
opt = getopt(spec)
#help option
if (!is.null(opt$help) ) {
help_opt()
q(status=1)
}
#version option
if (!is.null(opt$version) ) {
cat("Version: ")
cat(ver)
cat("\n")
q(status=1)
}
#libraries needed for sequence alignment
library("seqinr")
library("DECIPHER")
#input option
if (!is.null(opt$input) ){
seqs = readDNAStringSet(opt$input)
seqs = OrientNucleotides(seqs) #orient nucleotides in right direction if not already like that
aligned_seqs = AlignSeqs(seqs) #perform alignment
}else{
help_opt()
q(status=1)
}
#!/path/to/Rscript
#library to use getops
library('getopt')
#help option as a function
help_opt = function() {
cat("-v version\n-h help\n-i input file\n-n number of sequences we want
-t produce tree\n-d run diversity method\n-o output file\n")
}
#Version
ver = ".01"
#getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'input', 'i', 2, 'character',
'num', 'n', 2, 'integer',
'tree', 't', 0, 'character',
'div', 'd', 2, 'integer',
'output', 'o', 1, 'character'
), byrow=TRUE, ncol=4)
opt = getopt(spec)
#help option
if (!is.null(opt$help) ) {
help_opt()
q(status=1)
}
#version option
if (!is.null(opt$version) ) {
cat("Version: ")
cat(ver)
cat("\n")
q(status=1)
}
#libraries needed for sequence alignment
library("seqinr")
library("DECIPHER")
#input option
if (!is.null(opt$input) ){
seqs = readDNAStringSet(opt$input)
seqs = OrientNucleotides(seqs) #orient nucleotides in right direction if not already like that
aligned_seqs = AlignSeqs(seqs) #perform alignment
}else{
help_opt()
q(status=1)
}
?plot
?arrows
?text
?attr
clear
?objects
?png
?dev
??dev.off
?dev.off
?par
?nodelabels
??nodelabels
#you'll need the following libaries
library(ape)
library(phylobase)
#let's load the the tree
tree.test <- "(((t2:0.00000046788020592157,t4:0.00000046788020592157):0.00000046788020592157,t3:0.00000046788020592157):0.10934003018317024758,(t10:0.04184618573517987633,(t9:0.00000046788020592157,((t7:0.00000046788020592157,(t5:0.02237676579257168868,t6:0.07742197621376159522):0.05136134201448697839):0.04634952902815735187,t8:0.00000046788020592157):0.05287902113335381238):0.05167043123434712087):0.39113103728388676217,t1:0.00000046788020592157):0.0;"
tree.rd <- read.tree(text=tree.test)
#this will do some sorting for the plot
tree.ltg <- node.depth.edgelength(tree.rd)
tree.top <- sort(tree.ltg, index.return=TRUE, decreasing=TRUE)
tree.top <- tree.top$ix[1:5]
#and plot
plot(tree.rd, node.depth = 2)
nodelabels(node = node.height(tree.rd), col = "red", cex = 1.3)
#okay lets play with phylobase, first convert
(g1 <- as(tree.rd, "phylo4"))
#great, not lets lets test some stuff
nodeId(g1, type='all')
edgeLength(g1)
#whats the tip depth
tree.depth <- depthTips(g1)
#great and the top five?
sort(tree.depth, index.return=FALSE, decreasing=TRUE)[1:5]
?dendrapply
?edgelabels
?use.edge.length
??use.edge.length
?DistanceMatrix
??DistanceMatrix
?IdClusters
??IdClusters
typeof(dend)
#!/path/to/Rscript
#library to use getops
library('getopt')
#help option as a function
help_opt = function() {
cat("-v version\n-h help\n-i input file\n-n number of sequences we want
-t produce tree\n-d run diversity method\n-o output file\n")
}
#Version
ver = ".01"
#getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'input', 'i', 2, 'character',
'num', 'n', 2, 'integer',
'tree', 't', 0, 'character',
'div', 'd', 2, 'integer',
'output', 'o', 1, 'character'
), byrow=TRUE, ncol=4)
opt = getopt(spec)
#help option
if (!is.null(opt$help) ) {
help_opt()
q(status=1)
}
#version option
if (!is.null(opt$version) ) {
cat("Version: ")
cat(ver)
cat("\n")
q(status=1)
}
#libraries needed for sequence alignment
library("seqinr")
library("DECIPHER")
library("ape")
#input option
if (!is.null(opt$input) ){
seqs = readDNAStringSet(opt$input)
seqs = OrientNucleotides(seqs) #orient nucleotides in right direction if not already like that
aligned_seqs = AlignSeqs(seqs) #perform alignment
}else{
help_opt()
q(status=1)
}
?tree.depth
??tree.depth
?dim
??requireNamespace
?getopt::install()
#!/path/to/Rscript
#library to use getops
if (!requireNamespace("getopt", quietly = TRUE))
install.packages("getopt")
getopt::install()
library('getopt')
#help option as a function
help_opt = function() {
cat("-v version\n-h help\n-i input file\n-n number of sequences we want
-t produce tree\n-d run diversity method\n-o output file\n")
}
#Version
ver = ".01"
#getopt matrix
spec = matrix(c(
'version', 'v', 0, 'double',
'help', 'h', 0, 'character',
'input', 'i', 2, 'character',
'num', 'n', 2, 'integer',
'tree', 't', 0, 'character',
'div', 'd', 2, 'integer',
'output', 'o', 1, 'character'
), byrow=TRUE, ncol=4)
opt = getopt(spec)
#help option
if (!is.null(opt$help) ) {
help_opt()
q(status=1)
}
#version option
if (!is.null(opt$version) ) {
cat("Version: ")
cat(ver)
cat("\n")
q(status=1)
}
#libraries needed for sequence alignment
if (!requireNamespace("seqinr", quietly = TRUE))
install.packages("seqinr")
seqinr::install()
if (!requireNamespace("DECIPHER", quietly = TRUE))
install.packages("DECIPHER")
DECIPHER::install()
if (!requireNamespace("ape", quietly = TRUE))
install.packages("ape")
ape::install()
library("seqinr")
library("DECIPHER")
library("ape")
#input option
if (!is.null(opt$input) ){
seqs = readDNAStringSet(opt$input)
seqs = OrientNucleotides(seqs) #orient nucleotides in right direction if not already like that
aligned_seqs = AlignSeqs(seqs) #perform alignment
}else{
help_opt()
q(status=1)
}
if (!requireNamespace("seqinr", quietly = TRUE))
install.packages("seqinr")
seqinr::install()
remove.packages("DECIPHER")
if (!requireNamespace("DECIPHER", quietly = TRUE))
install.packages("DECIPHER")
DECIPHER::install()
if (!requireNamespace("DECIPHER", quietly = TRUE))
install.packages("DECIPHER")
clear
install.packages("DECIPHER")
if (!requireNamespace("DECIPHER", quietly = TRUE))
install.packages("DECIPHER")
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("DECIPHER")
}
install.packages("DECIPHER")
install.packages("DECIPHER")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
install.packages(c("Hmisc", "nlme"))
available(bioconductor)
available.packages(BiocManager)
available()
BiocManager::available()
BiocManager::available(pattern = "seq")
BiocManager::available(pattern = "seqinr")
BiocManager::available(pattern = "getopt")
BiocManager::available(pattern = "ape")
clear
remove.packages("DECIPHER")
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("seqinr")
}
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("seqinr")
}
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("seqinr")
}
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("DECIPHER")
}
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("DECIPHER")
}
install.packages(c("Hmisc", "nlme"))
remove.packages("DECIPHER")
if (!requireNamespace("DECIPHER", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install("DECIPHER")
}
install.packages(c("Hmisc", "nlme"))
install.packages("lattice")
version
help(package = "getopt")
help(package = "BiocManager")
help(Package = ape)
help(Package = "ape")
help(package = "ape")
help(package = "seqinr")
help(package = "DECIPHER")
setwd("~/Documents/Notre Dame/Spring 2020/Pfrender/R script/Rscript_repository")
seqs = readDNAStringSet("data/second_test_file.fasta")
install.packages("seqinr", repos='https://cloud.r-project.org')
library("seqinr")
library("DECIPHER")
library("ape")
seqs = readDNAStringSet("data/second_test_file.fasta")
seqs = OrientNucleotides(seqs)
aligned_seqs = AlignSeqs(seqs)
dist = DistanceMatrix(aligned_seqs, type = "matrix", includeTerminalGaps = TRUE,
penalizeGapGapMatches = FALSE, penalizeGapLetterMatches = FALSE)
??rowname
??rownames
